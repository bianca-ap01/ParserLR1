name: Build & Deploy (EC2 + GHCR)

on:
  push:
    branches: [ "main", "andres" ]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build & deploy"
        required: false
        default: ""

permissions:
  contents: read
  packages: write

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Si se ejecuta por "Run workflow", usa ese branch; si no, usa el ref del evento (push)
          ref: ${{ github.event.inputs.branch && github.event.inputs.branch || github.ref_name }}

      - name: Derive image name
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "BACK_IMG=ghcr.io/${owner,,}/${repo,,}-backend" >> $GITHUB_ENV

      - name: Read HEAD SHA
        id: sha
        run: echo "value=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/backend.Dockerfile
          push: true
          tags: |
            ${{ env.BACK_IMG }}:latest
            ${{ env.BACK_IMG }}:${{ steps.sha.outputs.value }}

  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      head_sha: ${{ steps.sha.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch && github.event.inputs.branch || github.ref_name }}

      - name: Derive image name
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "FRONT_IMG=ghcr.io/${owner,,}/${repo,,}-frontend" >> $GITHUB_ENV

      - name: Read HEAD SHA
        id: sha
        run: echo "value=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build & Push frontend (nginx)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/frontend.Dockerfile
          push: true
          build-args: |
            VITE_API_BASE=/api
          tags: |
            ${{ env.FRONT_IMG }}:latest
            ${{ env.FRONT_IMG }}:${{ steps.sha.outputs.value }}

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: [ build-backend, build-frontend ]
    steps:
      - name: Derive names + SHA
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "BACK_IMG=ghcr.io/${owner,,}/${repo,,}-backend"  >> $GITHUB_ENV
          echo "FRONT_IMG=ghcr.io/${owner,,}/${repo,,}-frontend" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ needs.build-frontend.outputs.head_sha }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.event.inputs.branch && github.event.inputs.branch || github.ref_name }}" >> $GITHUB_ENV

      - name: Deploy via SSH (Compose pull+up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -Eeuo pipefail
            TARGET_DIR="${{ secrets.EC2_PATH }}"

            if [ -n "${{ secrets.GH_READ_TOKEN }}" ]; then
              REPO_URL="https://x-access-token:${{ secrets.GH_READ_TOKEN }}@github.com/${{ github.repository }}.git"
            else
              REPO_URL="https://github.com/${{ github.repository }}.git"
            fi

            mkdir -p "$TARGET_DIR"
            cd "$TARGET_DIR"

            # Sync exacto a la rama objetivo
            if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
              git fetch --depth 1 origin "${BRANCH}"
              git checkout -B "${BRANCH}" "origin/${BRANCH}"
            else
              git clone --depth 1 --branch "${BRANCH}" "$REPO_URL" .
            fi

            mkdir -p deploy

            # Puertos
            FRONT_PORT=80
            if ss -ltn '( sport = :80 )' | grep -q ':80'; then FRONT_PORT=8080; fi
            printf "FRONT_HTTP_PORT=%s\nBACK_HTTP_PORT=8000\n" "$FRONT_PORT" > deploy/.env

            # Login GHCR (pull)
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # Imágenes del SHA construido en este run
            printf "BACKEND_IMAGE=%s:%s\nFRONTEND_IMAGE=%s:%s\n" \
              "${{ env.BACK_IMG }}" "${{ env.HEAD_SHA }}" \
              "${{ env.FRONT_IMG }}" "${{ env.HEAD_SHA }}" \
              > deploy/.env.images

            EF="--env-file deploy/.env"
            CF=""
            for f in docker-compose.yml docker-compose.yaml compose.yml compose.yaml; do [ -f "$f" ] && CF="$f" && break; done
            [ -n "$CF" ] || { echo "❌ No compose file"; exit 14; }

            docker compose -f "$CF" $EF --env-file deploy/.env.images pull
            docker compose -f "$CF" $EF --env-file deploy/.env.images up -d --force-recreate --remove-orphans

            docker logout ghcr.io || true
            docker system prune -f