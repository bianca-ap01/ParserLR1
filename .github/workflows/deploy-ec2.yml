name: Build & Deploy (EC2 + GHCR)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Derive image name (backend)
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "BACK_IMG=ghcr.io/${owner,,}/${repo,,}-backend" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/backend.Dockerfile
          push: true
          tags: |
            ${{ env.BACK_IMG }}:latest
            ${{ env.BACK_IMG }}:${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Derive image name (frontend)
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "FRONT_IMG=ghcr.io/${owner,,}/${repo,,}-frontend" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build & Push frontend (nginx)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/frontend.Dockerfile
          push: true
          build-args: |
            VITE_API_BASE=/api
          tags: |
            ${{ env.FRONT_IMG }}:latest
            ${{ env.FRONT_IMG }}:${{ github.sha }}

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: [ build-backend, build-frontend ]
    steps:
      - name: Derive image names (for this job)
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "BACK_IMG=ghcr.io/${owner,,}/${repo,,}-backend"  >> $GITHUB_ENV
          echo "FRONT_IMG=ghcr.io/${owner,,}/${repo,,}-frontend" >> $GITHUB_ENV

      - name: Deploy via SSH (Compose pull+up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -Eeuo pipefail

            TARGET_DIR="${{ secrets.EC2_PATH }}"

            # Si tu repo es privado, define GH_READ_TOKEN; si es público, no hace falta
            if [ -n "${{ secrets.GH_READ_TOKEN }}" ]; then
              REPO_URL="https://x-access-token:${{ secrets.GH_READ_TOKEN }}@github.com/${{ github.repository }}.git"
            else
              REPO_URL="https://github.com/${{ github.repository }}.git"
            fi

            mkdir -p "$TARGET_DIR"
            cd "$TARGET_DIR"

            # Sincroniza el repo de forma idempotente
            if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
              git fetch --all || true
              git reset --hard origin/main || true
            else
              if [ -z "$(ls -A .)" ]; then
                git clone --depth 1 "$REPO_URL" .
              else
                git init
                git remote remove origin 2>/dev/null || true
                git remote add origin "$REPO_URL"
                git fetch --depth 1 origin main
                git reset --hard origin/main
              fi
            fi

            # Asegura carpeta deploy/
            mkdir -p deploy

            # Login GHCR para poder hacer pull
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # Escribe .env.images (SIN espacios al inicio)
            printf "BACKEND_IMAGE=%s:%s\nFRONTEND_IMAGE=%s:%s\n" \
              "${{ env.BACK_IMG }}" "${{ github.sha }}" \
              "${{ env.FRONT_IMG }}" "${{ github.sha }}" \
              | tee deploy/.env.images > /dev/null

            # Usa deploy/.env si existe
            EF=""
            [ -f deploy/.env ] && EF="--env-file deploy/.env"

            # Detecta el archivo compose disponible
            COMPOSE_FILE=""
            for f in docker-compose.yml docker-compose.yaml compose.yml compose.yaml; do
              [ -f "$f" ] && COMPOSE_FILE="$f" && break
            done
            if [ -z "$COMPOSE_FILE" ]; then
              echo "❌ No se encontró archivo compose en $TARGET_DIR"
              ls -la
              exit 14
            fi

            docker compose -f "$COMPOSE_FILE" $EF --env-file deploy/.env.images pull
            docker compose -f "$COMPOSE_FILE" $EF --env-file deploy/.env.images up -d --remove-orphans

            docker logout ghcr.io || true
            docker system prune -f