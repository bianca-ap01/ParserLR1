name: Build & Deploy (EC2 + GHCR)

on:
  push:
    branches: [ "main", "andres" ]     # ← ahora también en 'andres'
  workflow_dispatch:                    # ← trigger manual con input opcional
    inputs:
      branch:
        description: 'Branch to deploy (default: ref name)'
        required: false
        default: ''

permissions:
  contents: read
  packages: write

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Derive image name (backend)
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "BACK_IMG=ghcr.io/${owner,,}/${repo,,}-backend" >> $GITHUB_ENV
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/backend.Dockerfile
          push: true
          tags: |
            ${{ env.BACK_IMG }}:latest
            ${{ env.BACK_IMG }}:${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Derive image name (frontend)
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "FRONT_IMG=ghcr.io/${owner,,}/${repo,,}-frontend" >> $GITHUB_ENV
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/frontend.Dockerfile
          push: true
          build-args: |
            VITE_API_BASE=/api
          tags: |
            ${{ env.FRONT_IMG }}:latest
            ${{ env.FRONT_IMG }}:${{ github.sha }}

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: [ build-backend, build-frontend ]
    steps:
      - name: Derive image names (for this job)
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "BACK_IMG=ghcr.io/${owner,,}/${repo,,}-backend"  >> $GITHUB_ENV
          echo "FRONT_IMG=ghcr.io/${owner,,}/${repo,,}-frontend" >> $GITHUB_ENV

      - name: Deploy via SSH (Compose pull+up) for selected branch
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -Eeuo pipefail

            TARGET_DIR="${{ secrets.EC2_PATH }}"
            BRANCH="${{ inputs.branch != '' && inputs.branch || github.ref_name }}"

            # Repo URL (con token si es privado)
            if [ -n "${{ secrets.GH_READ_TOKEN }}" ]; then
              REPO_URL="https://x-access-token:${{ secrets.GH_READ_TOKEN }}@github.com/${{ github.repository }}.git"
            else
              REPO_URL="https://github.com/${{ github.repository }}.git"
            fi

            mkdir -p "$TARGET_DIR"
            cd "$TARGET_DIR"

            # Sync repo exactamente a la rama solicitada
            if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
              git fetch --depth 1 origin "$BRANCH" || true
              git checkout -B "$BRANCH" "origin/$BRANCH" || git checkout "$BRANCH"
              git reset --hard "origin/$BRANCH" || true
            else
              if [ -z "$(ls -A .)" ]; then
                git clone --depth 1 --branch "$BRANCH" "$REPO_URL" .
              else
                git init
                git remote remove origin 2>/dev/null || true
                git remote add origin "$REPO_URL"
                git fetch --depth 1 origin "$BRANCH"
                git checkout -B "$BRANCH" "origin/$BRANCH"
              fi
            fi

            # Asegura deploy/
            mkdir -p deploy

            # Puertos (mantiene 80 si está libre, si no 8080)
            FRONT_PORT=80
            if ss -ltn '( sport = :80 )' | grep -q ':80'; then FRONT_PORT=8080; fi
            { echo "FRONT_HTTP_PORT=${FRONT_PORT}"; echo "BACK_HTTP_PORT=8000"; } > deploy/.env

            # Login GHCR
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # Imágenes de este commit (sha del workflow)
            printf "BACKEND_IMAGE=%s:%s\nFRONTEND_IMAGE=%s:%s\n" \
              "${{ env.BACK_IMG }}" "${{ github.sha }}" \
              "${{ env.FRONT_IMG }}" "${{ github.sha }}" \
              | tee deploy/.env.images > /dev/null

            # Compose file
            EF="--env-file deploy/.env"
            COMPOSE_FILE=""
            for f in docker-compose.yml docker-compose.yaml compose.yml compose.yaml; do
              [ -f "$f" ] && COMPOSE_FILE="$f" && break
            done
            [ -n "$COMPOSE_FILE" ] || { echo "❌ No compose file"; exit 14; }

            # Pull + Up de esa rama (con imágenes de ese commit)
            docker compose -f "$COMPOSE_FILE" $EF --env-file deploy/.env.images pull
            docker compose -f "$COMPOSE_FILE" $EF --env-file deploy/.env.images up -d --remove-orphans

            docker logout ghcr.io || true
            docker system prune -f

            echo "✓ Deploy de rama $BRANCH con imágenes :${{ github.sha }}"
