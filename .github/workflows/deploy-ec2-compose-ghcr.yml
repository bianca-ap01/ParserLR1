name: Build & Deploy (EC2 + GHCR)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  # paths de imágenes en GHCR (siempre en minúsculas)
  OWNER_LC: ${{ toLower(github.repository_owner) }}
  REPO_LC:  ${{ toLower(github.event.repository.name) }}
  BACK_IMG: ghcr.io/${{ toLower(github.repository_owner) }}/${{ toLower(github.event.repository.name) }}-backend
  FRONT_IMG: ghcr.io/${{ toLower(github.repository_owner) }}/${{ toLower(github.event.repository.name) }}-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/backend.Dockerfile
          push: true
          tags: |
            ${{ env.BACK_IMG }}:latest
            ${{ env.BACK_IMG }}:${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build & Push frontend (nginx)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/frontend.Dockerfile
          push: true
          build-args: |
            VITE_API_BASE=/api
          tags: |
            ${{ env.FRONT_IMG }}:latest
            ${{ env.FRONT_IMG }}:${{ github.sha }}

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: [ build-backend, build-frontend ]
    steps:
      - name: Deploy via SSH (Compose pull+up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.EC2_PATH }}

            # Login GHCR para poder hacer pull desde la EC2
            docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" -p "${{ secrets.GHCR_PAT }}"

            # Escribe las imágenes exactas (por SHA) que debe usar Compose
            cat > deploy/.env.images <<'EOF'
            BACKEND_IMAGE=${{ env.BACK_IMG }}:${{ github.sha }}
            FRONTEND_IMAGE=${{ env.FRONT_IMG }}:${{ github.sha }}
            EOF

            # Actualiza código (si tienes repo git en EC2)
            if [ -d .git ]; then
              git fetch --all && git reset --hard origin/main || true
            fi

            # Trae imágenes nuevas y levanta
            docker compose --env-file deploy/.env --env-file deploy/.env.images pull
            docker compose --env-file deploy/.env --env-file deploy/.env.images up -d --remove-orphans
            docker system prune -f